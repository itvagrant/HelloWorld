<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 初始化SpringMvc相应组件. -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- 默认情况下，SpringMvc不能处理静态资源的访问，使用该配置可以SpringMvc处理静态资源 -->
	<default-servlet-handler/>
	
	<!-- 
		页面控制器在处理完之后，回到Front Controller分发控制器，由Front Controller来
		决定将数据响应给对应的哪个.jsp文件进行数据渲染，等待渲染完毕之后，再由前端控制器响应
		渲染完毕的html给客户端控制器
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		页面控制器的包路径
		注意：为了防止和Spring IOC容器的扫描产生重复从而创建重复的组件实例
	 -->
	<context:component-scan base-package="com.srpingdemo.day1" use-default-filters="false">
		<!-- 
			只会扫描被@Controller注解修饰的组件和被@RestController注解修饰的组件.
			这些组件将受SpringMVC IOC容器管理。
		-->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
	</context:component-scan>
	
	
	<!-- 配置对应拦截器的对应的依赖的bean注入 -->
	<!-- <beans:bean id="authorityInterceptor" class="com.srpingdemo.day1.interceptor.AuthorityInterceptor">
		<beans:property name="authorityService" ref="authorityServiceImpl"></beans:property>
	</beans:bean> -->
	
	<!-- 配置拦截器 -->
	<!-- <interceptors>
		
			配置一个拦截器 
			注意：对同一Controller的拦截，配置的顺序决定了preHandle执行的顺序
			postHandle和afterCompletion在拦截器链的执行顺序中是和preHandle相反的
		
		<interceptor>
			注意配置顺序 
				mapping：配置拦截的控制器路径，
				exclude-mapping：不拦截的路径
				beans:bean：拦截器的类路径
			
			<mapping path="/user/**"/>
			<exclude-mapping path="/user/regist"/>
			<beans:bean class="com.cd.mvc.interceptors.SecondInterceptor"></beans:bean>
			<beans:ref bean="authorityInterceptor"/>
		</interceptor>
	</interceptors> -->
	
</beans:beans>
